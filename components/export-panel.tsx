"use client"

import { useState } from "react"
import type { BuilderComponent, WorkflowConnection } from "./no-code-builder"
import { Card } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Download, Code, Share, X, FileText, Package, Globe, Rocket } from "lucide-react"
import { DeploymentManager } from "./deployment-manager"

interface ExportPanelProps {
  components: BuilderComponent[]
  connections: WorkflowConnection[]
  onClose: () => void
}

export function ExportPanel({ components, connections, onClose }: ExportPanelProps) {
  const [exportType, setExportType] = useState("nextjs")
  const [appName, setAppName] = useState("my-hyperliquid-app")
  const [appDescription, setAppDescription] = useState("Built with HyperEasy")
  const [selectedFormat, setSelectedFormat] = useState("zip")
  const [showDeployment, setShowDeployment] = useState(false)

  const generateNextJSCode = () => {
    const componentImports = components
      .map(
        (comp) =>
          `import { ${comp.type.charAt(0).toUpperCase() + comp.type.slice(1)}Component } from '@/components/${comp.type}'`,
      )
      .join("\n")

    const componentJSX = components
      .map(
        (comp) =>
          `<${comp.type.charAt(0).toUpperCase() + comp.type.slice(1)}Component 
        id="${comp.id}"
        config={${JSON.stringify(comp.config, null, 2)}}
      />`,
      )
      .join("\n      ")

    return `// Generated by HyperEasy
import React from 'react'
${componentImports}

export default function ${appName.replace(/-/g, "")}() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-[#121212] via-[#0A0F1C] to-[#121212] p-6">
      <div className="container mx-auto">
        <h1 className="text-3xl font-bold text-white mb-8">${appDescription}</h1>
        <div className="grid gap-6">
          ${componentJSX}
        </div>
      </div>
    </div>
  )
}`
  }

  const generateConfigJSON = () => {
    return JSON.stringify(
      {
        name: appName,
        description: appDescription,
        version: "1.0.0",
        components: components.map((comp) => ({
          id: comp.id,
          type: comp.type,
          name: comp.name,
          config: comp.config,
          position: comp.position,
        })),
        connections: connections,
        metadata: {
          createdAt: new Date().toISOString(),
          generator: "HyperEasy v1.0",
          hyperliquidVersion: "latest",
        },
      },
      null,
      2,
    )
  }

  const generateDockerfile = () => {
    return `# Generated by HyperEasy
FROM node:18-alpine

WORKDIR /app

COPY package*.json ./
RUN npm ci --only=production

COPY . .
RUN npm run build

EXPOSE 3000

CMD ["npm", "start"]`
  }

  const generatePackageJSON = () => {
    return JSON.stringify(
      {
        name: appName,
        version: "1.0.0",
        description: appDescription,
        scripts: {
          dev: "next dev",
          build: "next build",
          start: "next start",
          lint: "next lint",
        },
        dependencies: {
          next: "^14.0.0",
          react: "^18.0.0",
          "react-dom": "^18.0.0",
          "@hyperliquid/sdk": "^1.0.0",
          tailwindcss: "^3.0.0",
        },
        devDependencies: {
          "@types/node": "^20.0.0",
          "@types/react": "^18.0.0",
          "@types/react-dom": "^18.0.0",
          typescript: "^5.0.0",
        },
      },
      null,
      2,
    )
  }

  const handleExport = () => {
    const files: Record<string, string> = {}

    switch (exportType) {
      case "nextjs":
        files[`${appName}/app/page.tsx`] = generateNextJSCode()
        files[`${appName}/package.json`] = generatePackageJSON()
        files[`${appName}/Dockerfile`] = generateDockerfile()
        files[`${appName}/hypereasy.config.json`] = generateConfigJSON()
        break

      case "config":
        files[`${appName}-config.json`] = generateConfigJSON()
        break

      case "docker":
        files[`${appName}/Dockerfile`] = generateDockerfile()
        files[`${appName}/package.json`] = generatePackageJSON()
        files[`${appName}/hypereasy.config.json`] = generateConfigJSON()
        break
    }

    // In a real app, this would create and download the files
    console.log("Exporting files:", files)
    alert(`Export complete! ${Object.keys(files).length} files generated.`)
  }

  const handleDeploy = () => {
    // In a real app, this would integrate with Vercel API
    alert("Deploying to Vercel... (This would integrate with Vercel's deployment API)")
  }

  const handleShare = () => {
    const shareData = {
      name: appName,
      description: appDescription,
      components,
      connections,
      sharedAt: new Date().toISOString(),
    }

    // In a real app, this would upload to a sharing service
    console.log("Sharing app:", shareData)
    alert("App shared! Link copied to clipboard.")
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold text-[#00D4FF]">Export & Deploy</h3>
        <button onClick={onClose} className="text-gray-400 hover:text-white transition-colors">
          <X className="w-5 h-5" />
        </button>
      </div>

      {/* App Configuration */}
      <Card className="p-4 bg-[#2A2A2A] border-[#444]">
        <h4 className="font-medium text-white mb-3">App Configuration</h4>
        <div className="space-y-3">
          <div>
            <Label className="text-sm text-gray-300">App Name</Label>
            <Input
              value={appName}
              onChange={(e) => setAppName(e.target.value)}
              className="mt-1"
              placeholder="my-hyperliquid-app"
            />
          </div>
          <div>
            <Label className="text-sm text-gray-300">Description</Label>
            <Textarea
              value={appDescription}
              onChange={(e) => setAppDescription(e.target.value)}
              className="mt-1"
              placeholder="Describe your app..."
              rows={2}
            />
          </div>
        </div>
      </Card>

      {/* Export Options */}
      <Card className="p-4 bg-[#2A2A2A] border-[#444]">
        <h4 className="font-medium text-white mb-3">Export Options</h4>
        <div className="space-y-3">
          <div>
            <Label className="text-sm text-gray-300">Export Type</Label>
            <Select value={exportType} onValueChange={setExportType}>
              <SelectTrigger className="mt-1">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="nextjs">Next.js Project</SelectItem>
                <SelectItem value="config">Configuration Only</SelectItem>
                <SelectItem value="docker">Docker Container</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="grid grid-cols-3 gap-2">
            <Button onClick={handleExport} className="bg-[#00D4FF] hover:bg-[#00B8E6] text-black" size="sm">
              <Download className="w-3 h-3 mr-1" />
              Export
            </Button>
            <Button onClick={handleDeploy} className="bg-green-600 hover:bg-green-700" size="sm">
              <Globe className="w-3 h-3 mr-1" />
              Deploy
            </Button>
            <Button onClick={handleShare} className="bg-[#FF00A8] hover:bg-[#E6009A]" size="sm">
              <Share className="w-3 h-3 mr-1" />
              Share
            </Button>
          </div>
        </div>
      </Card>

      {/* Export Preview */}
      <Card className="p-4 bg-[#2A2A2A] border-[#444]">
        <h4 className="font-medium text-white mb-3">Export Preview</h4>
        <div className="space-y-3">
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <span className="text-gray-400">Components:</span>
              <span className="text-[#00D4FF] ml-2">{components.length}</span>
            </div>
            <div>
              <span className="text-gray-400">Connections:</span>
              <span className="text-[#FF00A8] ml-2">{connections.length}</span>
            </div>
          </div>

          <div>
            <Label className="text-sm text-gray-300 mb-2 block">Included Files:</Label>
            <div className="space-y-1">
              {exportType === "nextjs" && (
                <>
                  <div className="flex items-center gap-2 text-xs text-gray-400">
                    <FileText className="w-3 h-3" />
                    <span>app/page.tsx</span>
                  </div>
                  <div className="flex items-center gap-2 text-xs text-gray-400">
                    <Package className="w-3 h-3" />
                    <span>package.json</span>
                  </div>
                  <div className="flex items-center gap-2 text-xs text-gray-400">
                    <Code className="w-3 h-3" />
                    <span>Dockerfile</span>
                  </div>
                </>
              )}
              {exportType === "config" && (
                <div className="flex items-center gap-2 text-xs text-gray-400">
                  <FileText className="w-3 h-3" />
                  <span>hypereasy.config.json</span>
                </div>
              )}
              {exportType === "docker" && (
                <>
                  <div className="flex items-center gap-2 text-xs text-gray-400">
                    <Code className="w-3 h-3" />
                    <span>Dockerfile</span>
                  </div>
                  <div className="flex items-center gap-2 text-xs text-gray-400">
                    <Package className="w-3 h-3" />
                    <span>package.json</span>
                  </div>
                </>
              )}
            </div>
          </div>
        </div>
      </Card>

      {/* Deployment Options */}
      <Card className="p-4 bg-[#2A2A2A] border-[#444]">
        <h4 className="font-medium text-white mb-3">Production Deployment</h4>
        <div className="space-y-2">
          <Button 
            onClick={() => setShowDeployment(true)}
            className="w-full justify-start bg-[#00D4FF] hover:bg-[#00B8E6] text-black" 
            size="sm"
          >
            <Rocket className="w-4 h-4 mr-2" />
            Deploy with HyperEasy Cloud
          </Button>
          <Button variant="outline" className="w-full justify-start bg-transparent" size="sm">
            <Globe className="w-4 h-4 mr-2" />
            Deploy to Vercel
          </Button>
          <Button variant="outline" className="w-full justify-start bg-transparent" size="sm">
            <Code className="w-4 h-4 mr-2" />
            Deploy to Railway
          </Button>
          <Button variant="outline" className="w-full justify-start bg-transparent" size="sm">
            <Package className="w-4 h-4 mr-2" />
            Deploy to Netlify
          </Button>
        </div>
      </Card>

      {/* Deployment Manager Modal */}
      {showDeployment && (
        <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div className="w-full max-w-4xl bg-[#1A1A1A] border border-[#333] rounded-lg shadow-2xl">
            <div className="p-6">
              <DeploymentManager 
                components={components} 
                connections={connections} 
                onClose={() => setShowDeployment(false)} 
              />
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
